{"version":3,"sources":["js/task-01.js","js/task-02.js","js/task-03.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","updatedUsers","table","toggleUserState","allUsers","userName","map","user","randomIntegerFromInterval","min","max","Math","floor","random","logSuccess","id","logError","warn","makeTransaction","transaction","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,GACL,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACTF,EAAQF,IACPA,KAIDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACbjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBP,EAASQ,GAAgBN,QAAQO,MAAMD,GAQvCE,EAAkB,CAACC,EAAUC,IAC1B,IAAIhB,QAAQ,CAACC,EAASC,KAI3BD,EAHqBc,EAASE,IAAIC,GAChCA,EAAKR,OAASM,EAAW,IAAKE,EAAMP,QAASO,EAAKP,QAAWO,MASnEJ,EAAgBL,EAAO,SAASD,KAAKJ,GACrCU,EAAgBL,EAAO,OAAOD,KAAKJ;;ACpCnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAiBhDK,EAAa,EAAGC,GAAAA,EAAIrB,KAAAA,MACxBC,QAAQC,mBAAmBmB,kBAAmBrB,QAG1CsB,EAAWD,IACfpB,QAAQsB,qCAAqCF,+BAWzCG,EAAkBC,GACf,IAAI9B,QAAQ,CAACC,EAASC,KACrBJ,MAAAA,EAAQqB,EAA0B,IAAK,KAE7ChB,WAAW,KACUmB,KAAKE,SAAW,IAGjCvB,EAAQ,CAAEyB,GAAII,EAAYJ,GAAIrB,KAAMP,IAGtCI,EAAO4B,EAAYJ,KAClB5B,KAMP+B,EAAgB,CAAEH,GAAI,GAAIK,OAAQ,MAAOvB,KAAKiB,GAAYO,MAAML,GAEhEE,EAAgB,CAAEH,GAAI,GAAIK,OAAQ,MAAOvB,KAAKiB,GAAYO,MAAML,GAEhEE,EAAgB,CAAEH,GAAI,GAAIK,OAAQ,KAAMvB,KAAKiB,GAAYO,MAAML,GAE/DE,EAAgB,CAAEH,GAAI,GAAIK,OAAQ,MAAOvB,KAAKiB,GAAYO,MAAML;;ACxDhE,aAFA,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBAAA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA","file":"src.ceda539a.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n\n      reject(transaction.id);\n    }, delay);\n  });\n};\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import * as firstTask from './js/task-01';\nimport * as secondTask from './js/task-02';\nimport * as thirdTask from './js/task-03';\n"]}